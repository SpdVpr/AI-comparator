"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/ai-news/route";
exports.ids = ["app/api/ai-news/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fai-news%2Froute&page=%2Fapi%2Fai-news%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fai-news%2Froute.ts&appDir=D%3A%5Caiweb%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Caiweb&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fai-news%2Froute&page=%2Fapi%2Fai-news%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fai-news%2Froute.ts&appDir=D%3A%5Caiweb%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Caiweb&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var D_aiweb_src_app_api_ai_news_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/ai-news/route.ts */ \"(rsc)/./src/app/api/ai-news/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/ai-news/route\",\n        pathname: \"/api/ai-news\",\n        filename: \"route\",\n        bundlePath: \"app/api/ai-news/route\"\n    },\n    resolvedPagePath: \"D:\\\\aiweb\\\\src\\\\app\\\\api\\\\ai-news\\\\route.ts\",\n    nextConfigOutput,\n    userland: D_aiweb_src_app_api_ai_news_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/ai-news/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhaS1uZXdzJTJGcm91dGUmcGFnZT0lMkZhcGklMkZhaS1uZXdzJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGYWktbmV3cyUyRnJvdXRlLnRzJmFwcERpcj1EJTNBJTVDYWl3ZWIlNUNzcmMlNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUQlM0ElNUNhaXdlYiZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDTDtBQUN4RTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLXNyb3ZuYXZhYy8/NWUwNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJEOlxcXFxhaXdlYlxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFxhaS1uZXdzXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9haS1uZXdzL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYWktbmV3c1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvYWktbmV3cy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkQ6XFxcXGFpd2ViXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXGFpLW5ld3NcXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2FpLW5ld3Mvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fai-news%2Froute&page=%2Fapi%2Fai-news%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fai-news%2Froute.ts&appDir=D%3A%5Caiweb%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Caiweb&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/ai-news/route.ts":
/*!**************************************!*\
  !*** ./src/app/api/ai-news/route.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n// src/app/api/ai-news/route.ts\n\n// AI klíčová slova pro filtraci obsahu\nconst AI_KEYWORDS = [\n    \"artificial intelligence\",\n    \"machine learning\",\n    \"deep learning\",\n    \"neural network\",\n    \"language model\",\n    \"llm\",\n    \"gpt\",\n    \"chatgpt\",\n    \"claude\",\n    \"gemini\",\n    \"anthropic\",\n    \"openai\",\n    \"midjourney\",\n    \"stable diffusion\",\n    \"dall-e\",\n    \"ai model\",\n    \"generative ai\",\n    \"large language model\",\n    \"ai assistant\",\n    \"ai tool\",\n    \"ai research\"\n];\n// Funkce pro kontrolu, zda je obsah relevantní pro AI\nfunction isAIRelated(title, description = \"\") {\n    const content = (title + \" \" + description).toLowerCase();\n    return AI_KEYWORDS.some((keyword)=>content.includes(keyword.toLowerCase()));\n}\n// Pomocná funkce pro kategorizaci článků\nfunction categorizeArticle(title, description) {\n    const content = ((title || \"\") + \" \" + (description || \"\")).toLowerCase();\n    if (!content) return \"general\";\n    if (content.includes(\"research\") || content.includes(\"study\") || content.includes(\"paper\") || content.includes(\"algorithm\") || content.includes(\"model\") || content.includes(\"technical\") || content.includes(\"scientists\") || content.includes(\"researchers\") || content.includes(\"breakthrough\") || content.includes(\"conference\")) {\n        return \"research\";\n    }\n    if (content.includes(\"startup\") || content.includes(\"funding\") || content.includes(\"million\") || content.includes(\"billion\") || content.includes(\"acquire\") || content.includes(\"market\") || content.includes(\"investment\") || content.includes(\"company\") || content.includes(\"business\") || content.includes(\"partnership\") || content.includes(\"revenue\") || content.includes(\"launch\") || content.includes(\"announce\")) {\n        return \"business\";\n    }\n    if (content.includes(\"tool\") || content.includes(\"software\") || content.includes(\"platform\") || content.includes(\"product\") || content.includes(\"app\") || content.includes(\"application\") || content.includes(\"feature\") || content.includes(\"release\") || content.includes(\"update\") || content.includes(\"version\") || content.includes(\"available\") || content.includes(\"users\") || content.includes(\"interface\")) {\n        return \"tools\";\n    }\n    return \"general\";\n}\n// Funkce pro získání dat z Google News RSS - pouze AI zprávy\nasync function fetchFromGoogleNews() {\n    try {\n        // Vyhledávací dotazy specifické pro AI\n        const queries = [\n            \"artificial intelligence\",\n            \"machine learning news\",\n            \"chatgpt openai\",\n            \"generative ai news\",\n            \"ai technology\"\n        ];\n        // Vezme všechny dotazy pro maximální pokrytí AI zpráv\n        const results = await Promise.all(queries.map(async (query)=>{\n            const encodedQuery = encodeURIComponent(query);\n            const response = await fetch(`https://news.google.com/rss/search?q=${encodedQuery}&hl=en-US&gl=US&ceid=US:en`);\n            if (!response.ok) {\n                throw new Error(`Google News RSS responded with status: ${response.status}`);\n            }\n            return response.text();\n        }));\n        // Funkce pro zpracování XML\n        const articles = [];\n        for (const xml of results){\n            const getValueBetweenTags = (xml, tag)=>{\n                const regex = new RegExp(`<${tag}[^>]*>(.*?)<\\\\/${tag}>`, \"s\");\n                const match = xml.match(regex);\n                return match ? match[1] : \"\";\n            };\n            // Najdeme všechny <item> tagy\n            const itemRegex = /<item>([\\s\\S]*?)<\\/item>/g;\n            const items = [\n                ...xml.matchAll(itemRegex)\n            ].map((match)=>match[1]);\n            for(let i = 0; i < Math.min(items.length, 8); i++){\n                const item = items[i];\n                const title = getValueBetweenTags(item, \"title\").replace(/&quot;/g, '\"').replace(/&amp;/g, \"&\").replace(/&#39;/g, \"'\");\n                const link = getValueBetweenTags(item, \"link\");\n                const pubDate = getValueBetweenTags(item, \"pubDate\");\n                const description = getValueBetweenTags(item, \"description\").replace(/&quot;/g, '\"').replace(/&amp;/g, \"&\").replace(/&#39;/g, \"'\");\n                const source = getValueBetweenTags(item, \"source\") || \"Google News\";\n                // Přidáme článek pouze pokud se týká AI\n                if (isAIRelated(title, description)) {\n                    articles.push({\n                        id: `gnews-${Date.now()}-${articles.length}`,\n                        title: title || \"No title available\",\n                        summary: description || \"No description available\",\n                        source: source,\n                        sourceUrl: link || \"#\",\n                        publishedAt: pubDate ? new Date(pubDate).toISOString() : new Date().toISOString(),\n                        category: categorizeArticle(title, description)\n                    });\n                }\n            }\n        }\n        return articles;\n    } catch (error) {\n        console.error(\"Error fetching from Google News RSS:\", error);\n        return [];\n    }\n}\n// Funkce pro získání dat ze specializovaných AI RSS zdrojů\nasync function fetchFromAISpecificSources() {\n    try {\n        // Specializované RSS zdroje o AI\n        const sources = [\n            {\n                url: \"https://www.reddit.com/r/artificial/.rss\",\n                name: \"r/artificial\"\n            },\n            {\n                url: \"https://www.reddit.com/r/MachineLearning/.rss\",\n                name: \"r/MachineLearning\"\n            },\n            {\n                url: \"https://medium.com/feed/topic/artificial-intelligence\",\n                name: \"Medium AI\"\n            }\n        ];\n        const results = await Promise.all(sources.map(async (source)=>{\n            try {\n                const response = await fetch(source.url);\n                if (!response.ok) {\n                    throw new Error(`Source ${source.name} responded with status: ${response.status}`);\n                }\n                const xml = await response.text();\n                return {\n                    xml,\n                    source: source.name\n                };\n            } catch (error) {\n                console.error(`Error fetching from ${source.name}:`, error);\n                return {\n                    xml: \"\",\n                    source: source.name\n                };\n            }\n        }));\n        // Funkce pro zpracování XML\n        const articles = [];\n        for (const { xml, source } of results){\n            if (!xml) continue;\n            const getValueBetweenTags = (xml, tag)=>{\n                const regex = new RegExp(`<${tag}[^>]*>(.*?)<\\\\/${tag}>`, \"s\");\n                const match = xml.match(regex);\n                return match ? match[1] : \"\";\n            };\n            // Najdeme všechny <item> nebo <entry> tagy (RSS nebo Atom)\n            const itemRegex = /<(?:item|entry)>([\\s\\S]*?)<\\/(?:item|entry)>/g;\n            const items = [\n                ...xml.matchAll(itemRegex)\n            ].map((match)=>match[1]);\n            for(let i = 0; i < Math.min(items.length, 5); i++){\n                const item = items[i];\n                // Zpracování různých formátů (RSS vs Atom)\n                const title = getValueBetweenTags(item, \"title\").replace(/&quot;/g, '\"').replace(/&amp;/g, \"&\").replace(/&#39;/g, \"'\");\n                const link = getValueBetweenTags(item, \"link\") || getValueBetweenTags(item, \"guid\");\n                const pubDateRaw = getValueBetweenTags(item, \"pubDate\") || getValueBetweenTags(item, \"published\") || getValueBetweenTags(item, \"updated\");\n                const description = (getValueBetweenTags(item, \"description\") || getValueBetweenTags(item, \"content\") || getValueBetweenTags(item, \"summary\")).replace(/&quot;/g, '\"').replace(/&amp;/g, \"&\").replace(/&#39;/g, \"'\");\n                // Přidáme článek (už nemusíme filtrovat, protože zdroje jsou AI-specifické)\n                articles.push({\n                    id: `aispecific-${Date.now()}-${articles.length}`,\n                    title: title || \"No title available\",\n                    summary: description || \"No description available\",\n                    source: source,\n                    sourceUrl: link || \"#\",\n                    publishedAt: pubDateRaw ? new Date(pubDateRaw).toISOString() : new Date().toISOString(),\n                    category: categorizeArticle(title, description)\n                });\n            }\n        }\n        return articles;\n    } catch (error) {\n        console.error(\"Error fetching from AI specific sources:\", error);\n        return [];\n    }\n}\n// Funkce pro získání dat z GitHub - AI open source projekty\nasync function fetchFromGitHub() {\n    try {\n        // Získáme trending AI repozitáře\n        const response = await fetch(\"https://api.github.com/search/repositories?q=topic:artificial-intelligence+topic:machine-learning&sort=updated&order=desc\", {\n            headers: {\n                \"Accept\": \"application/vnd.github.v3+json\",\n                \"User-Agent\": \"AI-News-Aggregator\"\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`GitHub API responded with status: ${response.status}`);\n        }\n        const data = await response.json();\n        // Zpracujeme výsledky\n        return data.items.slice(0, 5).map((repo)=>({\n                id: `github-${repo.id}`,\n                title: `${repo.name}: ${repo.description || \"New AI project on GitHub\"}`,\n                summary: `${repo.description || \"No description available\"} | Stars: ${repo.stargazers_count} | Forks: ${repo.forks_count}`,\n                source: \"GitHub\",\n                sourceUrl: repo.html_url,\n                publishedAt: repo.updated_at,\n                category: \"tools\"\n            }));\n    } catch (error) {\n        console.error(\"Error fetching from GitHub:\", error);\n        return [];\n    }\n}\n// Funkce pro získání dat z AI specializovaných webů\nasync function fetchFromAIWebsites() {\n    try {\n        // Seznam webů specializovaných na AI zprávy, které poskytují RSS\n        const websites = [\n            {\n                url: \"https://www.marktechpost.com/category/latest-ai-technology-news/feed/\",\n                source: \"MarkTechPost\"\n            },\n            {\n                url: \"https://www.infoworld.com/category/artificial-intelligence/index.rss\",\n                source: \"InfoWorld AI\"\n            },\n            {\n                url: \"https://www.artificialintelligence-news.com/feed/\",\n                source: \"AI News\"\n            }\n        ];\n        // Náhodně vybere dva weby, abychom měli pestrou škálu zdrojů\n        const selectedWebsites = websites.sort(()=>0.5 - Math.random()).slice(0, 2);\n        const results = await Promise.all(selectedWebsites.map(async (website)=>{\n            try {\n                const response = await fetch(website.url);\n                if (!response.ok) {\n                    throw new Error(`${website.source} responded with status: ${response.status}`);\n                }\n                const xml = await response.text();\n                return {\n                    xml,\n                    source: website.source\n                };\n            } catch (error) {\n                console.error(`Error fetching from ${website.source}:`, error);\n                return {\n                    xml: \"\",\n                    source: website.source\n                };\n            }\n        }));\n        // Funkce pro zpracování XML\n        const articles = [];\n        for (const { xml, source } of results){\n            if (!xml) continue;\n            const getValueBetweenTags = (xml, tag)=>{\n                const regex = new RegExp(`<${tag}[^>]*>(.*?)<\\\\/${tag}>`, \"s\");\n                const match = xml.match(regex);\n                return match ? match[1] : \"\";\n            };\n            // Extract image from content\n            const getImageFromContent = (content)=>{\n                const imgRegex = /<img[^>]+src=\"([^\">]+)\"/;\n                const match = content.match(imgRegex);\n                return match ? match[1] : undefined;\n            };\n            // Najdeme všechny <item> tagy\n            const itemRegex = /<item>([\\s\\S]*?)<\\/item>/g;\n            const items = [\n                ...xml.matchAll(itemRegex)\n            ].map((match)=>match[1]);\n            for(let i = 0; i < Math.min(items.length, 5); i++){\n                const item = items[i];\n                const title = getValueBetweenTags(item, \"title\").replace(/&quot;/g, '\"').replace(/&amp;/g, \"&\").replace(/&#39;/g, \"'\");\n                const link = getValueBetweenTags(item, \"link\");\n                const pubDate = getValueBetweenTags(item, \"pubDate\");\n                const content = getValueBetweenTags(item, \"content:encoded\") || getValueBetweenTags(item, \"description\");\n                const description = content.replace(/<[^>]*>/g, \" \").replace(/\\s+/g, \" \").trim().replace(/&quot;/g, '\"').replace(/&amp;/g, \"&\").replace(/&#39;/g, \"'\");\n                const imageUrl = getImageFromContent(content);\n                // Přidáme články, které se týkají AI (většina by měla být, ale pro jistotu filtrujeme)\n                if (isAIRelated(title, description)) {\n                    articles.push({\n                        id: `aisite-${Date.now()}-${articles.length}`,\n                        title: title || \"No title available\",\n                        summary: description.substring(0, 200) + (description.length > 200 ? \"...\" : \"\") || \"No description available\",\n                        source: source,\n                        sourceUrl: link || \"#\",\n                        publishedAt: pubDate ? new Date(pubDate).toISOString() : new Date().toISOString(),\n                        imageUrl: imageUrl,\n                        category: categorizeArticle(title, description)\n                    });\n                }\n            }\n        }\n        return articles;\n    } catch (error) {\n        console.error(\"Error fetching from AI websites:\", error);\n        return [];\n    }\n}\n// Ukázková data jako fallback\nfunction getMockData() {\n    return [\n        {\n            id: \"mock-1\",\n            title: \"OpenAI Releases GPT-5 with Enhanced Reasoning Capabilities\",\n            summary: \"The new model demonstrates significant improvements in logical reasoning and problem-solving abilities compared to its predecessors.\",\n            source: \"AI Insider\",\n            sourceUrl: \"https://example.com/news/1\",\n            publishedAt: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n            category: \"research\"\n        },\n        {\n            id: \"mock-2\",\n            title: \"Google DeepMind Announces Breakthrough in Protein Folding Prediction\",\n            summary: \"New AI system can predict protein structures with unprecedented accuracy, potentially revolutionizing drug discovery.\",\n            source: \"Tech Chronicle\",\n            sourceUrl: \"https://example.com/news/2\",\n            publishedAt: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(),\n            category: \"research\"\n        },\n        {\n            id: \"mock-3\",\n            title: \"Microsoft Acquires AI Startup for $2.5 Billion\",\n            summary: \"The acquisition aims to enhance Microsoft's AI capabilities in natural language processing and computer vision.\",\n            source: \"Business Tech\",\n            sourceUrl: \"https://example.com/news/3\",\n            publishedAt: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString(),\n            category: \"business\"\n        },\n        {\n            id: \"mock-4\",\n            title: \"New AI Tool Helps Writers Overcome Creative Blocks\",\n            summary: \"The tool uses advanced language models to provide contextually relevant suggestions for writers struggling with creative blocks.\",\n            source: \"Creative Tech\",\n            sourceUrl: \"https://example.com/news/4\",\n            publishedAt: new Date(Date.now() - 18 * 60 * 60 * 1000).toISOString(),\n            category: \"tools\"\n        },\n        {\n            id: \"mock-5\",\n            title: \"AI Ethics Board Proposes New Guidelines for Responsible AI Development\",\n            summary: \"The proposed guidelines focus on transparency, fairness, and accountability in AI systems.\",\n            source: \"AI Ethics Journal\",\n            sourceUrl: \"https://example.com/news/5\",\n            publishedAt: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n            category: \"general\"\n        }\n    ];\n}\n// Hlavní handler pro API endpoint\nasync function GET() {\n    try {\n        // Pokusíme se získat data z více AI-specifických zdrojů současně\n        const [googleNewsData, aiSpecificData, githubData, aiWebsitesData] = await Promise.all([\n            fetchFromGoogleNews().catch(()=>[]),\n            fetchFromAISpecificSources().catch(()=>[]),\n            fetchFromGitHub().catch(()=>[]),\n            fetchFromAIWebsites().catch(()=>[])\n        ]);\n        // Sloučíme data ze všech zdrojů\n        let allArticles = [\n            ...googleNewsData,\n            ...aiSpecificData,\n            ...githubData,\n            ...aiWebsitesData\n        ];\n        // Ještě jednou se ujistíme, že články se týkají AI\n        allArticles = allArticles.filter((article)=>isAIRelated(article.title, article.summary));\n        // Pokud nemáme žádné články, vrátíme ukázková data\n        if (allArticles.length === 0) {\n            console.log(\"No AI related news found, returning mock data\");\n            allArticles = getMockData();\n        }\n        // Seřadíme podle data publikování (od nejnovějších)\n        allArticles.sort((a, b)=>new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime());\n        // Odstraníme duplikáty podle titulků (někdy stejná zpráva přichází z více zdrojů)\n        const seen = new Set();\n        const uniqueArticles = allArticles.filter((article)=>{\n            const normalizedTitle = article.title.toLowerCase().replace(/\\W+/g, \" \").trim();\n            const duplicate = seen.has(normalizedTitle);\n            seen.add(normalizedTitle);\n            return !duplicate;\n        });\n        // Vrátíme data jako JSON\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(uniqueArticles);\n    } catch (error) {\n        console.error(\"Error in AI news API route:\", error);\n        // V případě chyby vrátíme mock data\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(getMockData());\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/ai-news/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fai-news%2Froute&page=%2Fapi%2Fai-news%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fai-news%2Froute.ts&appDir=D%3A%5Caiweb%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=D%3A%5Caiweb&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();